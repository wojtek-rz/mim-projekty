entrypoints Program ;

layout toplevel ;
ProgramMain.     Program ::= [Stmt];

layout ":" ;


-- statements ----------------------------------------------

StmtBlock. Block ::= "{" [Stmt] "}" ;

separator  Stmt ";" ;

Decl.  Stmt ::= Ident ":=" Expr ;

Pass.      Stmt ::= "pass" ;

Assign.    Stmt ::= Ident "<-" Expr ;

Cond.      Stmt ::= "if" Expr ":" Block ; 

CondElse.  Stmt ::= "if" Expr ":" Block "else" ":" Block ;

layout stop "else" ;

While.     Stmt ::= "while" Expr ":" Block ;

ExprStmt.  Stmt ::=  Expr ;

Ret.       Stmt ::= "return" Expr ;

VRet.      Stmt ::= "return" ;



-- expression ----------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "True" ;

ELitFalse. Expr6 ::= "False" ;

FunArg.    Arg ::= Ident "|" ArgType;
separator  Arg "," ;

ELambdaShort.  Expr6 ::= "(" [Arg] ")" "-> " Type " (" Expr ")";

ELambda.   Expr6 ::= "(" [Arg] ")" "->" Type ":" Block;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Concat.    Expr5 ::= Expr5 "++" Expr6 ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "not " Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EEquals.   Expr2 ::= Expr2 "=" Expr3 ;

ENequals.  Expr2 ::= Expr2 "!=" Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ; 

coercions  Expr 6 ;

separator  Expr "," ;

-- types --------------------------

Int.       Type ::= "Int" ;

Str.       Type ::= "Str" ;

Bool.      Type ::= "Bool" ;

Void.      Type ::= "Void" ;

Fun.       Type ::= "(" [ArgType] ")" "->" Type ;

separator  ArgType "," ;

ValueArgType.  ArgType ::= Type ;

RefArgType.    ArgType ::= "*" Type ;

-- operators ----------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

-- comments ------------------------------------------------

comment    "//" ;

comment    "**" "**" ;
