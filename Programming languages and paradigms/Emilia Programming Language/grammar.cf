entrypoints Program ;

ProgramMain.     Program ::= [VarDecl] MainFunc [FuncDecl];

separator  VarDecl "\n" ;
separator  FuncDecl "\n" ;

DeclVar.   Decl ::= VarDecl ;
VarDeclaration.   VarDecl ::= Ident ":=" Expr ;

DeclFunc.  Decl ::= FuncDecl ;
FuncDeclaration.  FuncDecl ::= Ident ":=" "(" [Arg] ")" "->" Type ":" Block ;

MainFunction.  MainFunc ::= "code" ":" Block;

ValuArg. 	   Arg ::= Ident "|" Type;
RefArg. 	   Arg ::= Ident "|" "*" Type;

separator  Arg "," ;

layout ":" ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt ";" ;

Assign.    Stmt ::= Ident "<-" Expr ;

Pass.      Stmt ::= "pass" ;

Decl.      Stmt ::= Decl ;

Cond.      Stmt ::= "if" Expr ":" Block ; 

CondElse.  Stmt ::= "if" Expr ":" Block "else" ":" Block ;

layout stop "else" ;

While.     Stmt ::= "while" Expr ":" Block ;

StmtApp.   Stmt ::= Ident "(" [Expr] ")" ;

Ret.       Stmt ::= "return" Expr ;

VRet.      Stmt ::= "return" ;



-- expression ----------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

ELambda.   Expr6 ::= "(" [Arg] ")" "->" "(" Expr "|" Type  ")";
ELambda2.   Expr6 ::= "(" [Arg] ")" "->" "(" Block "|" Type  ")";

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ; 

coercions  Expr 6 ;

separator  Expr "," ;

-- types --------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "bool" ;

Void.      Type ::= "void" ;

Fun.       Type ::= "(" [Type] ")" "->" Type ;

separator  Type "," ;

-- operators ----------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "//" ;

comment    "**" "**" ;
