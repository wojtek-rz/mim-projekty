<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="pl.edu.mimuw.MatrixBinaryOperationTest" tests="112" skipped="0" failures="0" errors="0" timestamp="2022-05-21T11:54:11" hostname="wojtek-Swift-SF315-51G" time="0.587">
  <properties/>
  <testcase name="testSparseTimesScalar()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.076"/>
  <testcase name="testSparseTimesSparse()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="testAntiDiagonalPlusAntiDiagonal()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.321"/>
  <testcase name="[2] Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;, Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.034"/>
  <testcase name="[9] Matrix type: row; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         1.0       2.0       3.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.119"/>
  <testcase name="testRowPlusRow()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.362"/>
  <testcase name="[1] Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;, Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[4] Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;, Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[3] Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;, Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="testConstantPlusConstant()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[11] Matrix type: vector; height: 2, width: 1;&#10;|         18.0      |         &#10;|         19.0      |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[12] Matrix type: vector; height: 3, width: 1;&#10;|         15.0      |         &#10;|         16.0      |         &#10;|         17.0      |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="testAntiDiagonalTimesAntiDiagonal()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.369"/>
  <testcase name="[9] Matrix type: row; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         1.0       2.0       3.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.232"/>
  <testcase name="[1] Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.01"/>
  <testcase name="[2] Matrix type: full; height: 3, width: 2;&#10;|         1.0       2.0       |         &#10;|         3.0       4.0       |         &#10;|         5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[3] Matrix type: diagonal; height: 3, width: 3;&#10;|         [7.0]     0         0         |         &#10;|         0         [8.0]     0         |         &#10;|         0         0         [9.0]     |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[4] Matrix type: anti-diagonal; height: 3, width: 3;&#10;|         0         0         [10.0]    |         &#10;|         0         [11.0]    0         |         &#10;|         [12.0]    0         0         |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[1] Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;, Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.042"/>
  <testcase name="[4] Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;, Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[10] Matrix type: row; height: 3, width: 2;&#10;|         [r\c]     [0]       [1]       |         &#10;|         [0]       1.0       2.0       |         &#10;|         ...       ...       ...       |         &#10;|         [2]       1.0       2.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[11] Matrix type: vector; height: 2, width: 1;&#10;|         18.0      |         &#10;|         19.0      |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.002"/>
  <testcase name="[3] Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;, Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.013"/>
  <testcase name="[2] Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;, Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[5] Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.014"/>
  <testcase name="[6] Matrix type: sparse; height: 3, width: 2;&#10;|         [r\c]     [0]       [1]       |         &#10;|         [0]       1.0       2.0       |         &#10;|         [1]       3.0       4.0       |         &#10;|         [2]       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.002"/>
  <testcase name="[12] Matrix type: vector; height: 3, width: 1;&#10;|         15.0      |         &#10;|         16.0      |         &#10;|         17.0      |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.017"/>
  <testcase name="[13] Matrix type: constant; height: 3, width: 2;&#10;|         [r\c]     [0]       ...       [1]       |         &#10;|         [0]       6.0       ...       6.0       |         &#10;|         ...       ...       ...       ...       |         &#10;|         [2]       6.0       ...       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[14] Matrix type: diagonal; height: 2, width: 2;&#10;|         [1.0]     0         |         &#10;|         0         [1.0]     |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[10] Matrix type: row; height: 3, width: 2;&#10;|         [r\c]     [0]       [1]       |         &#10;|         [0]       1.0       2.0       |         &#10;|         ...       ...       ...       |         &#10;|         [2]       1.0       2.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.013"/>
  <testcase name="[7] Matrix type: column; height: 2, width: 3;&#10;|         [r\c]     [0]       ...       [2]       |         &#10;|         [0]       1.0       ...       1.0       |         &#10;|         [1]       2.0       ...       2.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.009"/>
  <testcase name="[9] Matrix type: row; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         1.0       2.0       3.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.009"/>
  <testcase name="[8] Matrix type: column; height: 3, width: 2;&#10;|         1.0       1.0       |         &#10;|         2.0       2.0       |         &#10;|         3.0       3.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[13] Matrix type: constant; height: 3, width: 2;&#10;|         [r\c]     [0]       ...       [1]       |         &#10;|         [0]       6.0       ...       6.0       |         &#10;|         ...       ...       ...       ...       |         &#10;|         [2]       6.0       ...       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.0"/>
  <testcase name="[10] Matrix type: row; height: 3, width: 2;&#10;|         [r\c]     [0]       [1]       |         &#10;|         [0]       1.0       2.0       |         &#10;|         ...       ...       ...       |         &#10;|         [2]       1.0       2.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[15] Matrix type: diagonal; height: 3, width: 3;&#10;|         [1.0]     0         0         |         &#10;|         0         [1.0]     0         |         &#10;|         0         0         [1.0]     |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.002"/>
  <testcase name="[15] Matrix type: diagonal; height: 3, width: 3;&#10;|         [1.0]     0         0         |         &#10;|         0         [1.0]     0         |         &#10;|         0         0         [1.0]     |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[11] Matrix type: vector; height: 2, width: 1;&#10;|         18.0      |         &#10;|         19.0      |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[12] Matrix type: vector; height: 3, width: 1;&#10;|         15.0      |         &#10;|         16.0      |         &#10;|         17.0      |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.036"/>
  <testcase name="[13] Matrix type: constant; height: 3, width: 2;&#10;|         [r\c]     [0]       ...       [1]       |         &#10;|         [0]       6.0       ...       6.0       |         &#10;|         ...       ...       ...       ...       |         &#10;|         [2]       6.0       ...       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.0"/>
  <testcase name="[1] Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="testMinusSparseMatrices()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[2] Matrix type: full; height: 3, width: 2;&#10;|         1.0       2.0       |         &#10;|         3.0       4.0       |         &#10;|         5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[14] Matrix type: diagonal; height: 2, width: 2;&#10;|         [1.0]     0         |         &#10;|         0         [1.0]     |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[16] Matrix type: constant; height: 3, width: 2;&#10;|         [r\c]     [0]       ...       [1]       |         &#10;|         [0]       0.0       ...       0.0       |         &#10;|         ...       ...       ...       ...       |         &#10;|         [2]       0.0       ...       0.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.0"/>
  <testcase name="testDiagonalPlusDiagonal()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.118"/>
  <testcase name="[16] Matrix type: constant; height: 3, width: 2;&#10;|         [r\c]     [0]       ...       [1]       |         &#10;|         [0]       0.0       ...       0.0       |         &#10;|         ...       ...       ...       ...       |         &#10;|         [2]       0.0       ...       0.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="testConstantPlusScalar()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.0"/>
  <testcase name="[1] Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.007"/>
  <testcase name="testConstantTimesScalar()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.0"/>
  <testcase name="[16] Matrix type: constant; height: 3, width: 2;&#10;|         [r\c]     [0]       ...       [1]       |         &#10;|         [0]       0.0       ...       0.0       |         &#10;|         ...       ...       ...       ...       |         &#10;|         [2]       0.0       ...       0.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.055"/>
  <testcase name="[1] Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[2] Matrix type: full; height: 3, width: 2;&#10;|         1.0       2.0       |         &#10;|         3.0       4.0       |         &#10;|         5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.004"/>
  <testcase name="[1] Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;, Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[3] Matrix type: diagonal; height: 3, width: 3;&#10;|         [7.0]     0         0         |         &#10;|         0         [8.0]     0         |         &#10;|         0         0         [9.0]     |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[3] Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;, Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.0"/>
  <testcase name="testDiagonalTimesDiagonal()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.136"/>
  <testcase name="[4] Matrix type: anti-diagonal; height: 3, width: 3;&#10;|         0         0         [10.0]    |         &#10;|         0         [11.0]    0         |         &#10;|         [12.0]    0         0         |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.008"/>
  <testcase name="[4] Matrix type: anti-diagonal; height: 3, width: 3;&#10;|         0         0         [10.0]    |         &#10;|         0         [11.0]    0         |         &#10;|         [12.0]    0         0         |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="testPlusSparseMatrices()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[5] Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.0"/>
  <testcase name="testTimesSparseMatrices()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[6] Matrix type: sparse; height: 3, width: 2;&#10;|         [r\c]     [0]       [1]       |         &#10;|         [0]       1.0       2.0       |         &#10;|         [1]       3.0       4.0       |         &#10;|         [2]       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[4] Matrix type: anti-diagonal; height: 3, width: 3;&#10;|         0         0         [10.0]    |         &#10;|         0         [11.0]    0         |         &#10;|         [12.0]    0         0         |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="testDiagonalTimesScalar()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.105"/>
  <testcase name="[12] Matrix type: vector; height: 3, width: 1;&#10;|         15.0      |         &#10;|         16.0      |         &#10;|         17.0      |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.003"/>
  <testcase name="[3] Matrix type: diagonal; height: 3, width: 3;&#10;|         [7.0]     0         0         |         &#10;|         0         [8.0]     0         |         &#10;|         0         0         [9.0]     |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.034"/>
  <testcase name="[8] Matrix type: column; height: 3, width: 2;&#10;|         1.0       1.0       |         &#10;|         2.0       2.0       |         &#10;|         3.0       3.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[4] Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;, Matrix type: sparse; height: 3, width: 2;&#10;|         [r\c]     [0]       [1]       |         &#10;|         [0]       1.0       2.0       |         &#10;|         [1]       3.0       4.0       |         &#10;|         [2]       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[2] Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;, Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.005"/>
  <testcase name="[5] Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[2] Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;, Matrix type: sparse; height: 3, width: 2;&#10;|         [r\c]     [0]       [1]       |         &#10;|         [0]       1.0       2.0       |         &#10;|         [1]       3.0       4.0       |         &#10;|         [2]       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[7] Matrix type: column; height: 2, width: 3;&#10;|         [r\c]     [0]       ...       [2]       |         &#10;|         [0]       1.0       ...       1.0       |         &#10;|         [1]       2.0       ...       2.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.013"/>
  <testcase name="[5] Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[14] Matrix type: diagonal; height: 2, width: 2;&#10;|         [1.0]     0         |         &#10;|         0         [1.0]     |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.004"/>
  <testcase name="[6] Matrix type: sparse; height: 3, width: 2;&#10;|         [r\c]     [0]       [1]       |         &#10;|         [0]       1.0       2.0       |         &#10;|         [1]       3.0       4.0       |         &#10;|         [2]       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.006"/>
  <testcase name="[7] Matrix type: column; height: 2, width: 3;&#10;|         [r\c]     [0]       ...       [2]       |         &#10;|         [0]       1.0       ...       1.0       |         &#10;|         [1]       2.0       ...       2.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[15] Matrix type: diagonal; height: 3, width: 3;&#10;|         [1.0]     0         0         |         &#10;|         0         [1.0]     0         |         &#10;|         0         0         [1.0]     |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.0"/>
  <testcase name="[2] Matrix type: full; height: 3, width: 2;&#10;|         1.0       2.0       |         &#10;|         3.0       4.0       |         &#10;|         5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.003"/>
  <testcase name="[8] Matrix type: column; height: 3, width: 2;&#10;|         1.0       1.0       |         &#10;|         2.0       2.0       |         &#10;|         3.0       3.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.0"/>
  <testcase name="[9] Matrix type: row; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         1.0       2.0       3.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.002"/>
  <testcase name="[16] Matrix type: constant; height: 3, width: 2;&#10;|         [r\c]     [0]       ...       [1]       |         &#10;|         [0]       0.0       ...       0.0       |         &#10;|         ...       ...       ...       ...       |         &#10;|         [2]       0.0       ...       0.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[15] Matrix type: diagonal; height: 3, width: 3;&#10;|         [1.0]     0         0         |         &#10;|         0         [1.0]     0         |         &#10;|         0         0         [1.0]     |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.0"/>
  <testcase name="[3] Matrix type: diagonal; height: 3, width: 3;&#10;|         [7.0]     0         0         |         &#10;|         0         [8.0]     0         |         &#10;|         0         0         [9.0]     |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[10] Matrix type: row; height: 3, width: 2;&#10;|         [r\c]     [0]       [1]       |         &#10;|         [0]       1.0       2.0       |         &#10;|         ...       ...       ...       |         &#10;|         [2]       1.0       2.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[11] Matrix type: vector; height: 2, width: 1;&#10;|         18.0      |         &#10;|         19.0      |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[3] Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;, Matrix type: full; height: 3, width: 2;&#10;|         1.0       2.0       |         &#10;|         3.0       4.0       |         &#10;|         5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[9] Matrix type: row; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         1.0       2.0       3.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.002"/>
  <testcase name="[10] Matrix type: row; height: 3, width: 2;&#10;|         [r\c]     [0]       [1]       |         &#10;|         [0]       1.0       2.0       |         &#10;|         ...       ...       ...       |         &#10;|         [2]       1.0       2.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[8] Matrix type: column; height: 3, width: 2;&#10;|         1.0       1.0       |         &#10;|         2.0       2.0       |         &#10;|         3.0       3.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.022"/>
  <testcase name="[4] Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;, Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.027"/>
  <testcase name="testAntiDiagonalTimesScalar()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.047"/>
  <testcase name="[6] Matrix type: sparse; height: 3, width: 2;&#10;|         [r\c]     [0]       [1]       |         &#10;|         [0]       1.0       2.0       |         &#10;|         [1]       3.0       4.0       |         &#10;|         [2]       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.014"/>
  <testcase name="[11] Matrix type: vector; height: 2, width: 1;&#10;|         18.0      |         &#10;|         19.0      |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[1] Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.0"/>
  <testcase name="[1] Matrix type: full; height: 2, width: 3;&#10;|         1.0       2.0       3.0       |         &#10;|         4.0       5.0       6.0       |         &#10;, Matrix type: full; height: 3, width: 2;&#10;|         1.0       2.0       |         &#10;|         3.0       4.0       |         &#10;|         5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.024"/>
  <testcase name="[13] Matrix type: constant; height: 3, width: 2;&#10;|         [r\c]     [0]       ...       [1]       |         &#10;|         [0]       6.0       ...       6.0       |         &#10;|         ...       ...       ...       ...       |         &#10;|         [2]       6.0       ...       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.024"/>
  <testcase name="[3] Matrix type: diagonal; height: 3, width: 3;&#10;|         [7.0]     0         0         |         &#10;|         0         [8.0]     0         |         &#10;|         0         0         [9.0]     |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[6] Matrix type: sparse; height: 3, width: 2;&#10;|         [r\c]     [0]       [1]       |         &#10;|         [0]       1.0       2.0       |         &#10;|         [1]       3.0       4.0       |         &#10;|         [2]       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[8] Matrix type: column; height: 3, width: 2;&#10;|         1.0       1.0       |         &#10;|         2.0       2.0       |         &#10;|         3.0       3.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[13] Matrix type: constant; height: 3, width: 2;&#10;|         [r\c]     [0]       ...       [1]       |         &#10;|         [0]       6.0       ...       6.0       |         &#10;|         ...       ...       ...       ...       |         &#10;|         [2]       6.0       ...       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="[4] Matrix type: anti-diagonal; height: 3, width: 3;&#10;|         0         0         [10.0]    |         &#10;|         0         [11.0]    0         |         &#10;|         [12.0]    0         0         |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.0"/>
  <testcase name="[2] Matrix type: full; height: 3, width: 2;&#10;|         1.0       2.0       |         &#10;|         3.0       4.0       |         &#10;|         5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.009"/>
  <testcase name="[15] Matrix type: diagonal; height: 3, width: 3;&#10;|         [1.0]     0         0         |         &#10;|         0         [1.0]     0         |         &#10;|         0         0         [1.0]     |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.0"/>
  <testcase name="[7] Matrix type: column; height: 2, width: 3;&#10;|         [r\c]     [0]       ...       [2]       |         &#10;|         [0]       1.0       ...       1.0       |         &#10;|         [1]       2.0       ...       2.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.006"/>
  <testcase name="[14] Matrix type: diagonal; height: 2, width: 2;&#10;|         [1.0]     0         |         &#10;|         0         [1.0]     |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.029"/>
  <testcase name="[5] Matrix type: sparse; height: 2, width: 3;&#10;|         [r\c]     [0]       [1]       [2]       |         &#10;|         [0]       1.0       2.0       3.0       |         &#10;|         [1]       4.0       5.0       6.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.01"/>
  <testcase name="[12] Matrix type: vector; height: 3, width: 1;&#10;|         15.0      |         &#10;|         16.0      |         &#10;|         17.0      |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.0"/>
  <testcase name="[7] Matrix type: column; height: 2, width: 3;&#10;|         [r\c]     [0]       ...       [2]       |         &#10;|         [0]       1.0       ...       1.0       |         &#10;|         [1]       2.0       ...       2.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.013"/>
  <testcase name="[16] Matrix type: constant; height: 3, width: 2;&#10;|         [r\c]     [0]       ...       [1]       |         &#10;|         [0]       0.0       ...       0.0       |         &#10;|         ...       ...       ...       ...       |         &#10;|         [2]       0.0       ...       0.0       |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.002"/>
  <testcase name="[14] Matrix type: diagonal; height: 2, width: 2;&#10;|         [1.0]     0         |         &#10;|         0         [1.0]     |         &#10;" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.001"/>
  <testcase name="testColumnPlusColumn()" classname="pl.edu.mimuw.MatrixBinaryOperationTest" time="0.088"/>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
