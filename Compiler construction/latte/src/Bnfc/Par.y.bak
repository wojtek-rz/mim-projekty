-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Bnfc.Par
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified Bnfc.Abs
import Bnfc.Lex

}

%name pProgram_internal Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'       { PT _ (TS _ 1)  }
  '!='      { PT _ (TS _ 2)  }
  '%'       { PT _ (TS _ 3)  }
  '&&'      { PT _ (TS _ 4)  }
  '('       { PT _ (TS _ 5)  }
  ')'       { PT _ (TS _ 6)  }
  '*'       { PT _ (TS _ 7)  }
  '+'       { PT _ (TS _ 8)  }
  '++'      { PT _ (TS _ 9)  }
  ','       { PT _ (TS _ 10) }
  '-'       { PT _ (TS _ 11) }
  '--'      { PT _ (TS _ 12) }
  '.'       { PT _ (TS _ 13) }
  '/'       { PT _ (TS _ 14) }
  ':'       { PT _ (TS _ 15) }
  ';'       { PT _ (TS _ 16) }
  '<'       { PT _ (TS _ 17) }
  '<='      { PT _ (TS _ 18) }
  '='       { PT _ (TS _ 19) }
  '=='      { PT _ (TS _ 20) }
  '>'       { PT _ (TS _ 21) }
  '>='      { PT _ (TS _ 22) }
  '['       { PT _ (TS _ 23) }
  '[]'      { PT _ (TS _ 24) }
  ']'       { PT _ (TS _ 25) }
  'boolean' { PT _ (TS _ 26) }
  'class'   { PT _ (TS _ 27) }
  'else'    { PT _ (TS _ 28) }
  'false'   { PT _ (TS _ 29) }
  'for'     { PT _ (TS _ 30) }
  'if'      { PT _ (TS _ 31) }
  'int'     { PT _ (TS _ 32) }
  'new'     { PT _ (TS _ 33) }
  'null'    { PT _ (TS _ 34) }
  'return'  { PT _ (TS _ 35) }
  'string'  { PT _ (TS _ 36) }
  'true'    { PT _ (TS _ 37) }
  'void'    { PT _ (TS _ 38) }
  'while'   { PT _ (TS _ 39) }
  '{'       { PT _ (TS _ 40) }
  '||'      { PT _ (TS _ 41) }
  '}'       { PT _ (TS _ 42) }
  L_Ident   { PT _ (TV _)    }
  L_integ   { PT _ (TI _)    }
  L_quoted  { PT _ (TL _)    }

%%

Ident :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.Ident) }
Ident  : L_Ident { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Ident (tokenText $1)) }

Integer :: { (Bnfc.Abs.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

String  :: { (Bnfc.Abs.BNFC'Position, String) }
String   : L_quoted { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), ((\(PT _ (TL s)) -> s) $1)) }

Program :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.Program) }
Program
  : ListTopDef { (fst $1, Bnfc.Abs.Program (fst $1) (snd $1)) }

TopDef :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.TopDef) }
TopDef
  : 'class' Ident '{' ListClsDefItem '}' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.ClsDef (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | Type Ident '(' ListArg ')' Block { (fst $1, Bnfc.Abs.FnDef (fst $1) (snd $1) (snd $2) (snd $4) (snd $6)) }

ListTopDef :: { (Bnfc.Abs.BNFC'Position, [Bnfc.Abs.TopDef]) }
ListTopDef
  : TopDef { (fst $1, (:[]) (snd $1)) }
  | TopDef ListTopDef { (fst $1, (:) (snd $1) (snd $2)) }

ListClsDefItem :: { (Bnfc.Abs.BNFC'Position, [Bnfc.Abs.ClsDefItem]) }
ListClsDefItem
  : {- empty -} { (Bnfc.Abs.BNFC'NoPosition, []) }
  | ClsDefItem ListClsDefItem { (fst $1, (:) (snd $1) (snd $2)) }

ClsDefItem :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.ClsDefItem) }
ClsDefItem
  : Type Ident ';' { (fst $1, Bnfc.Abs.AttrDef (fst $1) (snd $1) (snd $2)) }

Arg :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.Arg) }
Arg
  : Type Ident { (fst $1, Bnfc.Abs.Arg (fst $1) (snd $1) (snd $2)) }

ListArg :: { (Bnfc.Abs.BNFC'Position, [Bnfc.Abs.Arg]) }
ListArg
  : {- empty -} { (Bnfc.Abs.BNFC'NoPosition, []) }
  | Arg { (fst $1, (:[]) (snd $1)) }
  | Arg ',' ListArg { (fst $1, (:) (snd $1) (snd $3)) }

Block :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.Block) }
Block
  : '{' ListStmt '}' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Block (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListStmt :: { (Bnfc.Abs.BNFC'Position, [Bnfc.Abs.Stmt]) }
ListStmt
  : {- empty -} { (Bnfc.Abs.BNFC'NoPosition, []) }
  | Stmt ListStmt { (fst $1, (:) (snd $1) (snd $2)) }

Stmt :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.Stmt) }
Stmt
  : ';' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Empty (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | Block { (fst $1, Bnfc.Abs.BStmt (fst $1) (snd $1)) }
  | Type ListItem ';' { (fst $1, Bnfc.Abs.Decl (fst $1) (snd $1) (snd $2)) }
  | LValue '=' Expr ';' { (fst $1, Bnfc.Abs.Ass (fst $1) (snd $1) (snd $3)) }
  | LValue '++' ';' { (fst $1, Bnfc.Abs.Incr (fst $1) (snd $1)) }
  | LValue '--' ';' { (fst $1, Bnfc.Abs.Decr (fst $1) (snd $1)) }
  | 'return' Expr ';' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Ret (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'return' ';' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.VRet (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'if' '(' Expr ')' Stmt { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Cond (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | 'if' '(' Expr ')' Stmt 'else' Stmt { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.CondElse (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5) (snd $7)) }
  | 'while' '(' Expr ')' Stmt { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.While (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | 'for' '(' Type Ident ':' Ident ')' Stmt { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.For (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $4) (snd $6) (snd $8)) }
  | Expr ';' { (fst $1, Bnfc.Abs.SExp (fst $1) (snd $1)) }

Item :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.Item) }
Item
  : Ident { (fst $1, Bnfc.Abs.NoInit (fst $1) (snd $1)) }
  | Ident '=' Expr { (fst $1, Bnfc.Abs.Init (fst $1) (snd $1) (snd $3)) }

ListItem :: { (Bnfc.Abs.BNFC'Position, [Bnfc.Abs.Item]) }
ListItem
  : Item { (fst $1, (:[]) (snd $1)) }
  | Item ',' ListItem { (fst $1, (:) (snd $1) (snd $3)) }

LValue :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.LValue) }
LValue
  : Ident { (fst $1, Bnfc.Abs.LVar (fst $1) (snd $1)) }
  | LValue '[' Expr ']' { (fst $1, Bnfc.Abs.LArr (fst $1) (snd $1) (snd $3)) }
  | LValue '.' Ident { (fst $1, Bnfc.Abs.LAttr (fst $1) (snd $1) (snd $3)) }

Type :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.Type) }
Type
  : 'int' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Int (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'string' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Str (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'boolean' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Bool (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'void' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Void (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | Ident { (fst $1, Bnfc.Abs.Cls (fst $1) (snd $1)) }
  | Type '[]' { (fst $1, Bnfc.Abs.Arr (fst $1) (snd $1)) }

ListType :: { (Bnfc.Abs.BNFC'Position, [Bnfc.Abs.Type]) }
ListType
  : {- empty -} { (Bnfc.Abs.BNFC'NoPosition, []) }
  | Type { (fst $1, (:[]) (snd $1)) }
  | Type ',' ListType { (fst $1, (:) (snd $1) (snd $3)) }

Expr7 :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.Expr) }
Expr7
  : 'new' Ident { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.ENewObject (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'new' Type '[' Expr ']' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.ENewArray (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | LValue { (fst $1, Bnfc.Abs.ELValue (fst $1) (snd $1)) }
  | '(' Ident ')' 'null' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.ENull (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '(' Expr ')' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), (snd $2)) }

Expr6 :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.Expr) }
Expr6
  : Integer { (fst $1, Bnfc.Abs.ELitInt (fst $1) (snd $1)) }
  | 'true' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.ELitTrue (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'false' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.ELitFalse (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | Ident '(' ListExpr ')' { (fst $1, Bnfc.Abs.EApp (fst $1) (snd $1) (snd $3)) }
  | String { (fst $1, Bnfc.Abs.EString (fst $1) (snd $1)) }
  | Expr7 { (fst $1, (snd $1)) }

Expr5 :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.Expr) }
Expr5
  : '-' Expr6 { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Neg (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '!' Expr6 { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Not (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Expr6 { (fst $1, (snd $1)) }

Expr4 :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.Expr) }
Expr4
  : Expr4 MulOp Expr5 { (fst $1, Bnfc.Abs.EMul (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr5 { (fst $1, (snd $1)) }

Expr3 :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.Expr) }
Expr3
  : Expr3 AddOp Expr4 { (fst $1, Bnfc.Abs.EAdd (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr4 { (fst $1, (snd $1)) }

Expr2 :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.Expr) }
Expr2
  : Expr2 RelOp Expr3 { (fst $1, Bnfc.Abs.ERel (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr3 { (fst $1, (snd $1)) }

Expr1 :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.Expr) }
Expr1
  : Expr2 '&&' Expr1 { (fst $1, Bnfc.Abs.EAnd (fst $1) (snd $1) (snd $3)) }
  | Expr2 { (fst $1, (snd $1)) }

Expr :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.Expr) }
Expr
  : Expr1 '||' Expr { (fst $1, Bnfc.Abs.EOr (fst $1) (snd $1) (snd $3)) }
  | Expr1 { (fst $1, (snd $1)) }

ListExpr :: { (Bnfc.Abs.BNFC'Position, [Bnfc.Abs.Expr]) }
ListExpr
  : {- empty -} { (Bnfc.Abs.BNFC'NoPosition, []) }
  | Expr { (fst $1, (:[]) (snd $1)) }
  | Expr ',' ListExpr { (fst $1, (:) (snd $1) (snd $3)) }

AddOp :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.AddOp) }
AddOp
  : '+' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Plus (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | '-' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Minus (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }

MulOp :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.MulOp) }
MulOp
  : '*' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Times (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | '/' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Div (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | '%' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.Mod (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }

RelOp :: { (Bnfc.Abs.BNFC'Position, Bnfc.Abs.RelOp) }
RelOp
  : '<' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.LTH (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | '<=' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.LE (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | '>' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.GTH (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | '>=' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.GE (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | '==' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.EQU (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }
  | '!=' { (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1), Bnfc.Abs.NE (uncurry Bnfc.Abs.BNFC'Position (tokenLineCol $1))) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProgram :: [Token] -> Err Bnfc.Abs.Program
pProgram = fmap snd . pProgram_internal
}

