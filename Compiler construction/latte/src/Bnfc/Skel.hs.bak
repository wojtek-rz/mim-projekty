-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Bnfc.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Bnfc.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Bnfc.Abs.Ident -> Result
transIdent x = case x of
  Bnfc.Abs.Ident string -> failure x

transProgram :: Show a => Bnfc.Abs.Program' a -> Result
transProgram x = case x of
  Bnfc.Abs.Program _ topdefs -> failure x

transTopDef :: Show a => Bnfc.Abs.TopDef' a -> Result
transTopDef x = case x of
  Bnfc.Abs.ClsDef _ ident clsdefitems -> failure x
  Bnfc.Abs.FnDef _ type_ ident args block -> failure x

transClsDefItem :: Show a => Bnfc.Abs.ClsDefItem' a -> Result
transClsDefItem x = case x of
  Bnfc.Abs.AttrDef _ type_ ident -> failure x

transArg :: Show a => Bnfc.Abs.Arg' a -> Result
transArg x = case x of
  Bnfc.Abs.Arg _ type_ ident -> failure x

transBlock :: Show a => Bnfc.Abs.Block' a -> Result
transBlock x = case x of
  Bnfc.Abs.Block _ stmts -> failure x

transStmt :: Show a => Bnfc.Abs.Stmt' a -> Result
transStmt x = case x of
  Bnfc.Abs.Empty _ -> failure x
  Bnfc.Abs.BStmt _ block -> failure x
  Bnfc.Abs.Decl _ type_ items -> failure x
  Bnfc.Abs.Ass _ lvalue expr -> failure x
  Bnfc.Abs.Incr _ lvalue -> failure x
  Bnfc.Abs.Decr _ lvalue -> failure x
  Bnfc.Abs.Ret _ expr -> failure x
  Bnfc.Abs.VRet _ -> failure x
  Bnfc.Abs.Cond _ expr stmt -> failure x
  Bnfc.Abs.CondElse _ expr stmt1 stmt2 -> failure x
  Bnfc.Abs.While _ expr stmt -> failure x
  Bnfc.Abs.For _ type_ ident1 ident2 stmt -> failure x
  Bnfc.Abs.SExp _ expr -> failure x

transItem :: Show a => Bnfc.Abs.Item' a -> Result
transItem x = case x of
  Bnfc.Abs.NoInit _ ident -> failure x
  Bnfc.Abs.Init _ ident expr -> failure x

transLValue :: Show a => Bnfc.Abs.LValue' a -> Result
transLValue x = case x of
  Bnfc.Abs.LVar _ ident -> failure x
  Bnfc.Abs.LArr _ lvalue expr -> failure x
  Bnfc.Abs.LAttr _ lvalue ident -> failure x

transType :: Show a => Bnfc.Abs.Type' a -> Result
transType x = case x of
  Bnfc.Abs.Int _ -> failure x
  Bnfc.Abs.Str _ -> failure x
  Bnfc.Abs.Bool _ -> failure x
  Bnfc.Abs.Void _ -> failure x
  Bnfc.Abs.Cls _ ident -> failure x
  Bnfc.Abs.Arr _ type_ -> failure x
  Bnfc.Abs.Fun _ type_ types -> failure x

transExpr :: Show a => Bnfc.Abs.Expr' a -> Result
transExpr x = case x of
  Bnfc.Abs.ENewObject _ ident -> failure x
  Bnfc.Abs.ENewArray _ type_ expr -> failure x
  Bnfc.Abs.ELValue _ lvalue -> failure x
  Bnfc.Abs.ENull _ ident -> failure x
  Bnfc.Abs.ELitInt _ integer -> failure x
  Bnfc.Abs.ELitTrue _ -> failure x
  Bnfc.Abs.ELitFalse _ -> failure x
  Bnfc.Abs.EApp _ ident exprs -> failure x
  Bnfc.Abs.EString _ string -> failure x
  Bnfc.Abs.Neg _ expr -> failure x
  Bnfc.Abs.Not _ expr -> failure x
  Bnfc.Abs.EMul _ expr1 mulop expr2 -> failure x
  Bnfc.Abs.EAdd _ expr1 addop expr2 -> failure x
  Bnfc.Abs.ERel _ expr1 relop expr2 -> failure x
  Bnfc.Abs.EAnd _ expr1 expr2 -> failure x
  Bnfc.Abs.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => Bnfc.Abs.AddOp' a -> Result
transAddOp x = case x of
  Bnfc.Abs.Plus _ -> failure x
  Bnfc.Abs.Minus _ -> failure x

transMulOp :: Show a => Bnfc.Abs.MulOp' a -> Result
transMulOp x = case x of
  Bnfc.Abs.Times _ -> failure x
  Bnfc.Abs.Div _ -> failure x
  Bnfc.Abs.Mod _ -> failure x

transRelOp :: Show a => Bnfc.Abs.RelOp' a -> Result
transRelOp x = case x of
  Bnfc.Abs.LTH _ -> failure x
  Bnfc.Abs.LE _ -> failure x
  Bnfc.Abs.GTH _ -> failure x
  Bnfc.Abs.GE _ -> failure x
  Bnfc.Abs.EQU _ -> failure x
  Bnfc.Abs.NE _ -> failure x
